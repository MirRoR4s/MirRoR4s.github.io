<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>博客</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on 博客</description>
    <generator>Hugo -- 0.140.2</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 07 Jan 2025 21:54:02 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>61b Lec35</title>
      <link>http://localhost:1313/posts/61b-lec35/</link>
      <pubDate>Tue, 07 Jan 2025 21:54:02 +0800</pubDate>
      <guid>http://localhost:1313/posts/61b-lec35/</guid>
      <description>&lt;p&gt;这是一个测试&lt;/p&gt;</description>
    </item>
    <item>
      <title>61b Lec34</title>
      <link>http://localhost:1313/posts/61b-lec34/</link>
      <pubDate>Mon, 06 Jan 2025 20:37:52 +0800</pubDate>
      <guid>http://localhost:1313/posts/61b-lec34/</guid>
      <description>&lt;h2 id=&#34;课后习题&#34;&gt;课后习题&lt;/h2&gt;
&lt;p&gt;问：对下面的三个序列对，对每一对序列，判断第二个序列是否会出现在第一个序列的排序过程中。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;alt text&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;答：考察插入排序、归并排序、快速排序、堆排序。我觉得这道题的难点在于要在20分钟之内解决。（试卷11道题只给了110分钟，本题占据最高的3分）&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;问：为什么Java的Arrays.sort对int、long、char这样的基本数据类型数组采用快排，但对对象类型数组却采用归并排序呢？&lt;/p&gt;
&lt;p&gt;答：经过一番&lt;a href=&#34;https://stackoverflow.com/questions/3707190/why-does-javas-arrays-sort-method-use-two-different-sorting-algorithms-for-diff&#34;&gt;查阅&lt;/a&gt;，这个问题的答案应该是稳定性。快排是不稳定的（61B的讲义提到稳不稳定取决于分区策略，我有点迷茫了），而归并排序是稳定的。我们希望排序对象类型数组时它是稳定的，所以才采用归并排序。比如讲义中提到的将学生根据名称排序，如果名称相同则再根据学分排序。在这里如果排序算法不稳定，那么学分排序之后名称相同的学生的相对顺序就会被破坏。&lt;/p&gt;</description>
    </item>
    <item>
      <title>你好</title>
      <link>http://localhost:1313/posts/61b-lec33/</link>
      <pubDate>Mon, 06 Jan 2025 20:26:32 +0800</pubDate>
      <guid>http://localhost:1313/posts/61b-lec33/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;本节课程讲述的内容如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;快速排序（quicksort）算法的起源&lt;/li&gt;
&lt;li&gt;快速排序算法描述&lt;/li&gt;
&lt;li&gt;快速排序算法性能&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;起源httpsdocsgooglecompresentationd19cbz7ou-_b5y0btyo1ifiaeqcn0digccz49cmo9_hy4editslideidg9816be120_1_370&#34;&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/19CbZ7oU-_b5y0Btyo1IfIAEqcn0DIgcCz49cMO9_hy4/edit#slide=id.g9816be120_1_370&#34;&gt;起源&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;快速排序算法（以下简称快排）是一个名为 Tony Hoare 的人提出的。他当时在开发一个将英文翻译为俄文的程序，具体的实现思路是在遇见一个英文单词时利用二分查找算法在字典中查找该英文单词对应的俄文单词并进行相应的替换。&lt;/p&gt;
&lt;p&gt;在理想的情况下，如果字典的长度是D，那么执行一次二分查找的时间复杂度是$\Theta(logD)$，所以将N个英文单词翻译为对应俄文单词的时间复杂度就为$\Theta(NlogD)$（执行N次二分查找）。然而现实并没有这么理想，因为字典信息存储在磁带上，所以从后面的单词跳到前面的单词就需要移动磁带，这会花费一定的时间，所以执行二分查找的时间复杂度并不是$O(logD)$。解决这个问题的办法就是让磁带不会来回移动而是一直往后走，实现该目标的措施就是事先排序英文句子，所以Tone Hoare就需要找到一个能够排序英文句子的算法，这就引出了快排。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;算法描述&#34;&gt;算法描述&lt;/h2&gt;
&lt;p&gt;快排的核心是一个称为&lt;a href=&#34;https://docs.google.com/presentation/d/19CbZ7oU-_b5y0Btyo1IfIAEqcn0DIgcCz49cMO9_hy4/edit#slide=id.g4661758db_113&#34;&gt;分区&lt;/a&gt;（partition）的操作，分区指的是选中数组的某个元素（这个被选中的元素成为pivot），经过一些步骤使得pivot左边的元素都小于等于pivot，而pivot右边的元素都大于等于pivot（这个过程中pivot在数组中的位置可能会也可能不会改变）。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;课后习题&#34;&gt;课后习题&lt;/h2&gt;
&lt;p&gt;问：找到快排一个最坏情况下的输入（假设总选择最左边的元素作为pivot）&lt;/p&gt;
&lt;p&gt;答：最坏情况出现在pivot分区后总落在数组的第一个位置，这种情况对应的输入可以是 [1, 2, 3, 4, 5]&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;问：快排在最好、最坏、平均情况下的递归深度是多少？&lt;/p&gt;
&lt;p&gt;答：&lt;strong&gt;分区的次数和递归深度相等&lt;/strong&gt;，假设总选择最左边的元素作为pivot，那么：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;最好情况：最好情况下会进行$O(log^n)$次分区，所以最好情况下的递归深度是$O(log^n)$&lt;/li&gt;
&lt;li&gt;最坏情况：最坏情况下会进行N次分区，所以最坏情况下的递归深度是$O(n)$&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/19CbZ7oU-_b5y0Btyo1IfIAEqcn0DIgcCz49cMO9_hy4/edit#slide=id.g4661758db_1583&#34;&gt;平均情况&lt;/a&gt;：$O(log^n)$&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;问：假设采用的分区策略是将元素分为3类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;小于pivot&lt;/li&gt;
&lt;li&gt;等于pivot&lt;/li&gt;
&lt;li&gt;大于pivot&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;假设该分区策略的运行时间是$\Theta(N)$，证明一个快排对一个长为N但仅有7个不同元素的数组的运行时间是$\Theta(N)$。（比如[0, 1, 0, 0, 6, 6, 5, 5, 4, 2, 2, 0, 3, 0, 1, …, 2, 6]）&lt;/p&gt;
&lt;p&gt;由于每次分区至少都会排除一个键的所有元素，所以最多会进行7次分区。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;问：找到一个使得&lt;code&gt;Arrays.sort&lt;/code&gt; 崩溃（crash）的整型数组。&lt;code&gt;Arrays.sort(int[])&lt;/code&gt;使用的排序算法是快排。更多细节参阅 &lt;a href=&#34;https://www.cs.dartmouth.edu/~doug/mdmspe.pdf&#34;&gt;A Killer Adversary for Quicksort&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;答：一个使得Arrays.sort崩溃的输入必然是由于快排的性能过差导致的，根据&lt;a href=&#34;https://docs.google.com/presentation/d/19CbZ7oU-_b5y0Btyo1IfIAEqcn0DIgcCz49cMO9_hy4/edit#slide=id.g4661758db_1458&#34;&gt;讲义&lt;/a&gt;可以知道，快排性能退化的原因是分区后pivot落在了导致左右两个子数组长度极不均衡的位置，这会导致分区次数的增加从而对性能产生影响。所以现在要找到一个使得分区落点不平衡的输入，关键的问题是如何找到？&lt;/p&gt;
&lt;p&gt;之前的问题可以知道快排对近乎有序的数组性能很差，但在构造一个很大的有序数组并传给&lt;code&gt;Arrays.sort&lt;/code&gt;后程序并没有崩溃，猜测内部做了一些优化。看起来必须依照论文给出的方法构造输入。&lt;/p&gt;</description>
    </item>
    <item>
      <title>学习路线</title>
      <link>http://localhost:1313/posts/path/</link>
      <pubDate>Mon, 06 Jan 2025 09:32:17 +0800</pubDate>
      <guid>http://localhost:1313/posts/path/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;汇总我的计算机学习资源&lt;/p&gt;
&lt;h2 id=&#34;web-开发&#34;&gt;Web 开发&lt;/h2&gt;
&lt;p&gt;Web 开发跟随 MDN 的脚步即可，学习完毕之后上手 React 或者 Vue 的官方教程应该就没什么问题了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Learn/CSS&#34;&gt;CSS 教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;编程语言&#34;&gt;编程语言&lt;/h2&gt;
&lt;h3 id=&#34;python&#34;&gt;Python&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/zh-cn/3/tutorial/index.html&#34;&gt;官方教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pythontips.readthedocs.io/zh/latest/2016-03-07-iterator-and-generator/&#34;&gt;python 之禅&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;学完以上两个，或能写出地道的 python 代码。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jackfrued/Python-Core-50-Courses/tree/master&#34;&gt;Python 语言基础 50 课&lt;/a&gt;：讲的挺好的，适合入门。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;fastapi&#34;&gt;FastAPI&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://fastapi.tiangolo.com/zh/tutorial/&#34;&gt;官方教程-中文版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zhanymkanov/fastapi-best-practices&#34;&gt;他人总结的 FastAPI 最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;git&#34;&gt;Git&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/zh/v2&#34;&gt;Pro git-中文版&lt;/a&gt;：2014 年的书籍了，稍微有些过时。此外中文版的翻译不是很好。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://learngitbranching.js.org/?locale=zh_CN&#34;&gt;Learn Git Branching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/chinese/news/git-rename-branch-how-to-change-a-local-branch-name/&#34;&gt;重命名分支&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;配置代理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tmux终端复用器&#34;&gt;Tmux（终端复用器）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ruanyifeng.com/blog/2019/10/tmux.html&#34;&gt;Tmux 使用教程-阮一峰&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://louiszhai.github.io/2017/09/30/tmux/&#34;&gt;Tmux 使用手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;软件工程&#34;&gt;软件工程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://web.mit.edu/6.031/www/sp21/&#34;&gt;MIT 6.031 软件构造&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/liqiuhao/category/1167752.html&#34;&gt;6.031 中文翻译-工大李秋豪&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据库&#34;&gt;数据库&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3schools.com/sql/&#34;&gt;w3School-sql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sqlstyle.guide/zh/&#34;&gt;SQL样式指南&lt;/a&gt;：描述SQL语句的编写规范等，有一款名为 Prettier SQL VSCode 的插件支持这种格式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;go&#34;&gt;Go&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://go.dev/doc/tutorial/#&#34;&gt;官方教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tour.go-zh.org/list&#34;&gt;Go 指南中文版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/liupzmin/effective-go-zh/tree/main&#34;&gt;Effective Go 中文版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/unknwon/the-way-to-go_ZH_CN/tree/master&#34;&gt;Go 入门指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gin-gonic.com/zh-cn/docs/&#34;&gt;Gin 框架文档-中文版&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    <item>
      <title>博客搭建</title>
      <link>http://localhost:1313/posts/my-first-post/</link>
      <pubDate>Mon, 06 Jan 2025 09:07:27 +0800</pubDate>
      <guid>http://localhost:1313/posts/my-first-post/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;本篇文章描述了如何基于Hugo和Github Page搭建一个私人博客。&lt;/p&gt;
&lt;h2 id=&#34;hugo配置&#34;&gt;Hugo配置&lt;/h2&gt;
&lt;p&gt;从&lt;a href=&#34;https://github.com/gohugoio/hugo/releases/tag/v0.140.2&#34;&gt;此处&lt;/a&gt;下载Hugo的exe文件然后解压到某个文件夹中，之后配置相应的环境变量。&lt;/p&gt;
&lt;h2 id=&#34;github-page-配置&#34;&gt;Github Page 配置&lt;/h2&gt;
&lt;p&gt;根据&lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-github/&#34;&gt;官方文档&lt;/a&gt;的描述，需要利用github的workflow完成hugo网页的部署。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里一定要注意博客目录本身要和远程仓库关联起来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;引用&#34;&gt;引用&lt;/h2&gt;
&lt;p&gt;如果遇到了一些问题，可以参看此处的&lt;a href=&#34;https://jianzhnie.github.io/post/hugo_site/&#34;&gt;文章&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
